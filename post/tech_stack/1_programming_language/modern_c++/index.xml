<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>现代C&#43;&#43; on ZHXILIN&#39;S BLOG</title>
    <link>https://zhxilin.github.io/post/tech_stack/1_programming_language/modern_c&#43;&#43;/</link>
    <description>Recent content in 现代C&#43;&#43; on ZHXILIN&#39;S BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016–2020, zhxilin&#39;s blog; all rights reserved.</copyright>
    <lastBuildDate>Sun, 10 Apr 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zhxilin.github.io/post/tech_stack/1_programming_language/modern_c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>new表达式、operator new和placement new</title>
      <link>https://zhxilin.github.io/post/tech_stack/1_programming_language/modern_c&#43;&#43;/language_base/new/</link>
      <pubDate>Mon, 11 Apr 2022 11:38:45 +0800</pubDate>
      
      <guid>https://zhxilin.github.io/post/tech_stack/1_programming_language/modern_c&#43;&#43;/language_base/new/</guid>
      <description>&lt;p&gt;C++中&lt;code&gt;new&lt;/code&gt;关键字和&lt;code&gt;delete&lt;/code&gt;关键字我们肯定都使用过，它们是对堆中的内存进行申请和释放的操作，这两个操作是不能被重载的。有的同学可能会被问到，如何实现自定义内存分配行为。搞懂这个问题之前，我们需要先了解&lt;code&gt;new&lt;/code&gt;表达式、&lt;code&gt;operator new&lt;/code&gt;和&lt;code&gt;placement new&lt;/code&gt;之间的关系。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>仿函数</title>
      <link>https://zhxilin.github.io/post/tech_stack/1_programming_language/modern_c&#43;&#43;/language_base/functor/</link>
      <pubDate>Sun, 10 Apr 2022 15:21:51 +0800</pubDate>
      
      <guid>https://zhxilin.github.io/post/tech_stack/1_programming_language/modern_c&#43;&#43;/language_base/functor/</guid>
      <description>&lt;p&gt;C++中仿函数是一个能行使函数功能的类，仿函数的使用方法几乎和函数一样。那么仿函数和函数到底有什么区别？仿函数有哪些优点？本节内容将一一解答。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>类型转换</title>
      <link>https://zhxilin.github.io/post/tech_stack/1_programming_language/modern_c&#43;&#43;/language_base/type_cast/</link>
      <pubDate>Sun, 10 Apr 2022 11:28:51 +0800</pubDate>
      
      <guid>https://zhxilin.github.io/post/tech_stack/1_programming_language/modern_c&#43;&#43;/language_base/type_cast/</guid>
      <description>&lt;p&gt;C++的类型转换分为隐式转换和显式转换。数值之间如何转换、指针之间如何转换、explicit关键字又是什么、强制类型转换操作符的区别又是什么，本节内容将一一解答。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>引用、指针、迭代器的区别？</title>
      <link>https://zhxilin.github.io/post/tech_stack/1_programming_language/modern_c&#43;&#43;/language_base/reference_pointer_iterator/</link>
      <pubDate>Sun, 10 Apr 2022 10:26:35 +0800</pubDate>
      
      <guid>https://zhxilin.github.io/post/tech_stack/1_programming_language/modern_c&#43;&#43;/language_base/reference_pointer_iterator/</guid>
      <description>&lt;p&gt;引用与指针的异同、指针与迭代器的异同，是一个老生常谈的话题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>什么是POD?</title>
      <link>https://zhxilin.github.io/post/tech_stack/1_programming_language/modern_c&#43;&#43;/language_base/pod/</link>
      <pubDate>Sat, 09 Apr 2022 17:50:42 +0800</pubDate>
      
      <guid>https://zhxilin.github.io/post/tech_stack/1_programming_language/modern_c&#43;&#43;/language_base/pod/</guid>
      <description>&lt;p&gt;为了兼容C内存的数据类型，C++11提出了POD的概念。什么是POD类型，POD类型有什么作用，本节内容将一一揭晓。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>